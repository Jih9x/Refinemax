// Global variables
let currentRefineLevel = 0;
let totalAttempts = 0;
let successCount = 0;
let failCount = 0;
let breakCount = 0;
let isItemBroken = false; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÅ‡∏ï‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
let inventory = []; // ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á
let currentItemId = null; // ID ‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
let totalZeny = 0; // Zeny ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
let totalStones = 0; // ‡∏´‡∏¥‡∏ô‡∏ï‡∏µ‡∏ö‡∏ß‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

// ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
const refineRates = [
    { level: 1, success: 100, cost: 10000 },
    { level: 2, success: 100, cost: 20000 },
    { level: 3, success: 100, cost: 30000 },
    { level: 4, success: 50, cost: 60000 },
    { level: 5, success: 50, cost: 70000 },
    { level: 6, success: 40, cost: 80000 },
    { level: 7, success: 40, cost: 90000 },
    { level: 8, success: 40, cost: 100000 },
    { level: 9, success: 40, cost: 100000 },
    { level: 10, success: 40, cost: 100000 },
    { level: 11, success: 40, cost: 100000 },
    { level: 12, success: 40, cost: 100000 },
    { level: 13, success: 40, cost: 100000 },
    { level: 14, success: 40, cost: 100000 }
];

// DOM Elements
const itemTypeSelect = document.getElementById('itemType');
const currentRefineLevelElement = document.getElementById('currentRefineLevel');
const successRateElement = document.getElementById('successRate');
const breakRateElement = document.getElementById('breakRate');
const refineCostElement = document.getElementById('refineCost');
const stoneUseElement = document.getElementById('stoneUse');
const totalZenyElement = document.getElementById('totalZeny');
const totalStonesElement = document.getElementById('totalStones');
const statBonusElement = document.getElementById('statBonus');
const refineLogElement = document.getElementById('refineLog');
const totalAttemptsElement = document.getElementById('totalAttempts');
const successCountElement = document.getElementById('successCount');
const failCountElement = document.getElementById('failCount');
const breakCountElement = document.getElementById('breakCount');
const totalZenySpentElement = document.getElementById('totalZenySpent');
const totalStonesUsedElement = document.getElementById('totalStonesUsed');
const refineBtn = document.getElementById('refineBtn');
const resetBtn = document.getElementById('resetBtn');
const resetAllBtn = document.getElementById('resetAllBtn');
const itemSymbol = document.getElementById('itemSymbol');
const inventoryContainer = document.getElementById('inventory');
const addToInventoryBtn = document.getElementById('addToInventoryBtn');
const repairBtn = document.getElementById('repairBtn');

// Event Listeners
document.addEventListener('DOMContentLoaded', initialize);
itemTypeSelect.addEventListener('change', updateItemImage);
itemTypeSelect.addEventListener('change', updateRates);
refineBtn.addEventListener('click', refineItem);
resetBtn.addEventListener('click', resetCurrentItem);
resetAllBtn.addEventListener('click', resetAll);
addToInventoryBtn.addEventListener('click', addItemToInventory);

// ‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏ã‡πà‡∏≠‡∏°: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ã‡πà‡∏≠‡∏° ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏±‡∏á (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡∏°)
let repairMode = false; // true = ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
let repairTargetId = null; // ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÅ‡∏ï‡∏Å
let repairMaterialId = null; // ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö

repairBtn.addEventListener('click', () => {
    if (!repairMode) {
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
        repairMode = true;
        repairTargetId = currentItemId;
        repairMaterialId = null;
        addToLog('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡πà‡∏≠‡∏°', 'reset');
        renderInventory();
        updateBrokenSelectStatus();
        updateRepairBtnState();
        repairBtn.textContent = '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ã‡πà‡∏≠‡∏°';
    } else {
        // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ã‡πà‡∏≠‡∏°
        repairItem();
    }
});

// Initialize the simulator
function initialize() {
    updateItemImage();
    updateRates();
    updateStatBonus();
    updateStats();
    loadInventory(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏•‡∏±‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏à‡∏≤‡∏Å localStorage ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    updateRepairBtnState();
}

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏•‡∏±‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏à‡∏≤‡∏Å localStorage
function loadInventory() {
    const savedInventory = localStorage.getItem('romInventory');
    if (savedInventory) {
        inventory = JSON.parse(savedInventory);
        renderInventory();
    }
}

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏•‡∏±‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏•‡∏á localStorage
function saveInventory() {
    localStorage.setItem('romInventory', JSON.stringify(inventory));
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á
function addItemToInventory() {
    const itemType = itemTypeSelect.value;
    const itemIndex = itemTypeSelect.selectedIndex;
    const itemText = itemTypeSelect.options[itemIndex].text;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°
    const itemId = 'item_' + Date.now() + '_' + Math.floor(Math.random() * 1000);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á
    const newItem = {
        id: itemId,
        type: itemType,
        name: itemText,
        level: 0,
        isBroken: false
    };
    
    inventory.push(newItem);
    saveInventory();
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÇ‡∏´‡∏°‡∏î‡∏ã‡πà‡∏≠‡∏°‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏´‡∏°‡πà
    repairMode = false;
    repairTargetId = null;
    repairMaterialId = null;
    renderInventory();
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
    selectItemFromInventory(itemId);
}

// ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á
function renderInventory() {
    inventoryContainer.innerHTML = '';
    updateRepairNotice();
    if (inventory.length === 0) {
        const emptyText = document.createElement('p');
        emptyText.textContent = '‡∏Ñ‡∏•‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÇ‡∏î‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏•‡∏á‡∏Ñ‡∏•‡∏±‡∏á"';
        emptyText.style.gridColumn = '1 / -1';
        emptyText.style.color = '#c9d1ff';
        emptyText.style.textAlign = 'center';
        emptyText.style.padding = '10px';
        inventoryContainer.appendChild(emptyText);
        return;
    }
    inventory.forEach(item => {
        const itemElement = document.createElement('div');
        itemElement.className = 'inventory-item';
        if (item.isBroken) {
            itemElement.classList.add('broken');
        }
        // ‡∏õ‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏ö‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Ç‡∏ì‡∏∞‡∏ã‡πà‡∏≠‡∏°
        if (repairMode && item.id === repairTargetId) {
            itemElement.classList.add('selected');
            itemElement.style.borderColor = '#ff3333';
            // ‡∏õ‡πâ‡∏≤‡∏¢‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡πà‡∏≠‡∏°
            const repairLabel = document.createElement('div');
            repairLabel.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡πà‡∏≠‡∏°';
            repairLabel.style.position = 'absolute';
            repairLabel.style.top = '4px';
            repairLabel.style.left = '4px';
            repairLabel.style.background = '#ff3333';
            repairLabel.style.color = '#fff';
            repairLabel.style.fontSize = '0.7em';
            repairLabel.style.padding = '2px 6px';
            repairLabel.style.borderRadius = '4px';
            itemElement.appendChild(repairLabel);
        } else if (repairMode && item.id === repairMaterialId) {
            itemElement.classList.add('selected');
            itemElement.style.borderColor = '#4bdc7c';
            // ‡∏õ‡πâ‡∏≤‡∏¢‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
            const matLabel = document.createElement('div');
            matLabel.textContent = '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö';
            matLabel.style.position = 'absolute';
            matLabel.style.top = '4px';
            matLabel.style.left = '4px';
            matLabel.style.background = '#4bdc7c';
            matLabel.style.color = '#13183a';
            matLabel.style.fontSize = '0.7em';
            matLabel.style.padding = '2px 6px';
            matLabel.style.borderRadius = '4px';
            itemElement.appendChild(matLabel);
        } else if (!repairMode && item.id === currentItemId) {
            itemElement.classList.add('selected');
        }
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÅ‡∏ó‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        const itemImageDiv = document.createElement('div');
        itemImageDiv.className = 'item-image';
        
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏≠‡πÄ‡∏ó‡∏°
        let symbol = '?';
        switch (item.type) {
            case 'weapon': symbol = '‚öîÔ∏è'; break;
            case 'shield': symbol = 'üõ°Ô∏è'; break;
            case 'armor': symbol = 'üëï'; break;
            case 'garment': symbol = 'üß•'; break;
            case 'shoes': symbol = 'üëü'; break;
            case 'accessory': symbol = 'üíç'; break;
            case 'hat': symbol = 'üé©'; break;
            case 'face': symbol = 'üëì'; break;
            case 'mouth': symbol = 'üò∑'; break;
            case 'back': symbol = 'üéí'; break;
            case 'tail': symbol = 'ü¶ä'; break;
        }
        itemImageDiv.textContent = symbol;
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡∏µ‡∏ö‡∏ß‡∏Å
        const itemLevel = document.createElement('div');
        itemLevel.className = 'item-level';
        if (item.isBroken) {
            itemLevel.classList.add('broken');
        }
        itemLevel.textContent = `+${item.level}`;
        
        // ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡∏°
        const itemName = document.createElement('div');
        itemName.className = 'item-name';
        itemName.textContent = item.name;
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å)
        if (item.isBroken && item.brokenAtLevel) {
            const brokenInfo = document.createElement('div');
            brokenInfo.className = 'broken-info';
            brokenInfo.textContent = `‡πÅ‡∏ï‡∏Å‡∏ó‡∏µ‡πà +${item.brokenAtLevel}`;
            itemElement.appendChild(brokenInfo);
        }
        
        // ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Å‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏° (‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö)
        const itemActions = document.createElement('div');
        itemActions.className = 'item-actions';
        
        const deleteBtn = document.createElement('button');
        deleteBtn.className = 'delete-item-btn';
        deleteBtn.textContent = '‡∏•‡∏ö';
        deleteBtn.addEventListener('click', (e) => {
            e.stopPropagation(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡∏°
            deleteItemFromInventory(item.id);
        });
        
        itemActions.appendChild(deleteBtn);
        
        // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô
        itemElement.appendChild(itemImageDiv);
        itemElement.appendChild(itemLevel);
        itemElement.appendChild(itemName);
        itemElement.appendChild(itemActions);
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ X ‡∏ö‡∏ô‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å
        if (item.isBroken) {
            const brokenMark = document.createElement('div');
            brokenMark.className = 'broken-mark';
            brokenMark.textContent = '‚úó';
            itemElement.appendChild(brokenMark);
        }
        
        // event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡∏° (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÇ‡∏´‡∏°‡∏î‡∏ã‡πà‡∏≠‡∏°)
        itemElement.addEventListener('click', () => {
            if (repairMode) {
                // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡∏° ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
                if (item.id !== repairTargetId) {
                    repairMaterialId = item.id;
                    renderInventory();
                    updateBrokenSelectStatus();
                    updateRepairBtnState();
                }
            } else {
                // ‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ
                selectItemFromInventory(item.id);
            }
        });
        
        inventoryContainer.appendChild(itemElement);
    });
}

function updateRepairNotice() {
    const notice = document.getElementById('repairNotice');
    if (!notice) return;
    if (repairMode && !repairMaterialId) {
        notice.style.display = '';
        notice.textContent = '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡πà‡∏≠‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ô‡∏µ‡πâ';
        notice.style.background = '#fffbe6';
        notice.style.color = '#b16a3b';
        notice.style.padding = '8px';
        notice.style.marginBottom = '8px';
        notice.style.borderRadius = '6px';
        notice.style.textAlign = 'center';
        notice.style.fontWeight = 'bold';
    } else if (repairMode && repairMaterialId) {
        notice.style.display = '';
        notice.textContent = '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ã‡πà‡∏≠‡∏° ‡∏Å‡∏î ‚Äú‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ã‡πà‡∏≠‡∏°‚Äù ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£';
        notice.style.background = '#e6fff2';
        notice.style.color = '#1a7f5a';
        notice.style.padding = '8px';
        notice.style.marginBottom = '8px';
        notice.style.borderRadius = '6px';
        notice.style.textAlign = 'center';
        notice.style.fontWeight = 'bold';
    } else {
        notice.style.display = 'none';
    }
}

// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏±‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á
function selectItemFromInventory(itemId) {
    resetCurrentItemState();
    const selectedItem = inventory.find(item => item.id === itemId);
    if (selectedItem) {
        currentItemId = itemId;
        itemTypeSelect.value = selectedItem.type;
        currentRefineLevel = selectedItem.level;
        isItemBroken = selectedItem.isBroken;
        updateItemImage();
        updateRefineLevelDisplay();
        updateStatBonus();
        updateRates();
        renderInventory();
        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 0/1 ‡∏´‡∏£‡∏∑‡∏≠ 1/1
        updateBrokenSelectStatus();
        if (!selectedItem.isBroken) {
            addToLog(`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡∏° ${selectedItem.name} +${selectedItem.level}`, 'reset');
            repairBtn.style.display = 'none';
            refineBtn.style.display = '';
        } else {
            repairBtn.style.display = '';
            refineBtn.style.display = 'none';
            addToLog(`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å +${selectedItem.level} ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡πà‡∏≠‡∏°‡πÑ‡∏î‡πâ`, 'break');
        }
    }
}

// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á
function updateInventoryItem() {
    if (currentItemId) {
        const itemIndex = inventory.findIndex(item => item.id === currentItemId);
        if (itemIndex !== -1) {
            inventory[itemIndex].level = currentRefineLevel;
            inventory[itemIndex].isBroken = isItemBroken;
            saveInventory();
            renderInventory();
        }
    }
}

// Update item symbol based on selection
function updateItemImage() {
    const itemType = itemTypeSelect.value;
    
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏≠‡πÄ‡∏ó‡∏°
    let symbol = '?';
    switch (itemType) {
        case 'weapon': symbol = '‚öîÔ∏è'; break;
        case 'shield': symbol = 'üõ°Ô∏è'; break;
        case 'armor': symbol = 'üëï'; break;
        case 'garment': symbol = 'üß•'; break;
        case 'shoes': symbol = 'üëü'; break;
        case 'accessory': symbol = 'üíç'; break;
        case 'hat': symbol = 'üé©'; break;
        case 'face': symbol = 'üëì'; break;
        case 'mouth': symbol = 'üò∑'; break;
        case 'back': symbol = 'üéí'; break;
        case 'tail': symbol = 'ü¶ä'; break;
    }
    
    itemSymbol.textContent = symbol;
}

// Calculate and update success and break rates
function updateRates() {
    const rates = calculateRates();
    successRateElement.textContent = rates.successRate;
    breakRateElement.textContent = rates.breakRate;
}

// Calculate success and break rates based on current state
function calculateRates() {
    let successRate = 100;
    let breakRate = 0;
    let failRate = 0;
    let cost = 0;
    
    // ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏µ‡∏ö‡∏ß‡∏Å‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô +15 ‡πÅ‡∏•‡πâ‡∏ß
    if (currentRefineLevel >= 15) {
        return {
            successRate: 0,
            breakRate: 0,
            failRate: 0,
            cost: 0
        };
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    const rateInfo = refineRates.find(rate => rate.level === currentRefineLevel);
    if (rateInfo) {
        successRate = rateInfo.success;
        cost = rateInfo.cost;
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÅ‡∏•‡∏∞‡πÅ‡∏ï‡∏Å
        if (successRate < 100) {
            const totalFailRate = 100 - successRate;
            failRate = totalFailRate / 2; // 50% ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            breakRate = totalFailRate / 2; // 50% ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        } else {
            failRate = 0;
            breakRate = 0;
        }
    }
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    refineCostElement.textContent = cost.toLocaleString();
    
    return {
        successRate: Math.round(successRate),
        breakRate: Math.round(breakRate),
        failRate: Math.round(failRate),
        cost: cost
    };
}

// Calculate stat bonus based on refine level
function calculateStatBonus() {
    // Each refine level adds 15 ATK/DEF
    return currentRefineLevel * 15;
}

// Update stat bonus display
function updateStatBonus() {
    const bonus = calculateStatBonus();
    statBonusElement.textContent = bonus;
}

// Main refining function
function refineItem() {
    // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏Å‡πà‡∏≠‡∏ô
    if (!currentItemId) {
        alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏±‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏µ‡∏ö‡∏ß‡∏Å");
        return;
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÅ‡∏ï‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏µ‡∏ö‡∏ß‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
    if (isItemBroken) {
        alert("‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÅ‡∏ï‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏µ‡∏ö‡∏ß‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ! ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î Reset");
        repairBtn.style.display = '';
        refineBtn.style.display = 'none';
        return;
    }

    // Cannot enhance above +15
    if (currentRefineLevel >= 15) {
        addToLog(`‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÄ‡∏õ‡πá‡∏ô +${currentRefineLevel} ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏µ‡∏ö‡∏ß‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ`, 'fail');
        return;
    }
    
    // Calculate rates
    const rates = calculateRates();
    const successRate = rates.successRate;
    const failRate = rates.failRate;
    const breakRate = rates.breakRate;
    const cost = rates.cost;
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏´‡∏¥‡∏ô‡∏ï‡∏µ‡∏ö‡∏ß‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
    totalZeny += cost;
    totalStones += 1;  // ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏µ‡∏ö‡∏ß‡∏Å‡πÉ‡∏ä‡πâ‡∏´‡∏¥‡∏ô‡∏ï‡∏µ‡∏ö‡∏ß‡∏Å 1 ‡∏ä‡∏¥‡πâ‡∏ô
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    totalZenyElement.textContent = totalZeny.toLocaleString();
    totalStonesElement.textContent = totalStones;
    totalZenySpentElement.textContent = totalZeny.toLocaleString();
    totalStonesUsedElement.textContent = totalStones;
    
    // Update statistics
    totalAttempts++;
    
    // Generate random number (1-100)
    const roll = Math.floor(Math.random() * 100) + 1;
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const currentItem = inventory.find(item => item.id === currentItemId);
    const itemName = currentItem ? currentItem.name : '‡πÑ‡∏≠‡πÄ‡∏ó‡∏°';
    
    // Determine result
    if (roll <= successRate) {
        // Success: +1
        currentRefineLevel++;
        successCount++;
        addToLog(`‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏ö‡∏ß‡∏Å ${itemName} +${currentRefineLevel - 1} ‡πÄ‡∏õ‡πá‡∏ô +${currentRefineLevel} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (‡πÇ‡∏¢‡∏ô‡πÑ‡∏î‡πâ ${roll}, ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‚â§ ${successRate}) ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ ${cost.toLocaleString()} Zeny`, 'success');
    } else if (roll <= (successRate + failRate)) {
        // Fail normally: -1 (minimum level is 0)
        failCount++;
        const oldLevel = currentRefineLevel;
        currentRefineLevel = Math.max(0, currentRefineLevel - 1);
        
        addToLog(`‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏ö‡∏ß‡∏Å ${itemName} +${oldLevel} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß! ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏•‡∏î‡πÄ‡∏´‡∏•‡∏∑‡∏≠ +${currentRefineLevel} (‡πÇ‡∏¢‡∏ô‡πÑ‡∏î‡πâ ${roll}, ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‚â§ ${successRate}) ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ ${cost.toLocaleString()} Zeny`, 'fail');
    } else {
        // Break: -1 and item destroyed, cannot refine anymore
        breakCount++;
        isItemBroken = true;
        const oldLevel = currentRefineLevel;
        
        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà
        if (currentItemId) {
            const itemIndex = inventory.findIndex(item => item.id === currentItemId);
            if (itemIndex !== -1) {
                inventory[itemIndex].brokenAtLevel = oldLevel;
            }
        }
        
        currentRefineLevel = Math.max(0, currentRefineLevel - 1);
        
        addToLog(`‡πÑ‡∏≠‡πÄ‡∏ó‡∏° ${itemName} +${oldLevel} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÅ‡∏•‡∏∞‡πÅ‡∏ï‡∏Å! ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏•‡∏î‡πÄ‡∏´‡∏•‡∏∑‡∏≠ +${currentRefineLevel} (‡πÇ‡∏¢‡∏ô‡πÑ‡∏î‡πâ ${roll}, ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‚â§ ${successRate}) ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ ${cost.toLocaleString()} Zeny`, 'break');
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏ß‡πà‡∏≤‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÅ‡∏ï‡∏Å‡πÅ‡∏•‡πâ‡∏ß
        itemSymbol.style.opacity = "0.5";
        itemSymbol.style.filter = "grayscale(100%)";
        
        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡∏µ‡∏ö‡∏ß‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á
        document.querySelector('.refine-level').classList.add('broken');
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÅ‡∏ï‡∏Å
        const brokenIcon = document.createElement('div');
        brokenIcon.className = 'broken-icon';
        brokenIcon.textContent = '‚úó';
        document.querySelector('.current-item').appendChild(brokenIcon);
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
        alert(`‡πÑ‡∏≠‡πÄ‡∏ó‡∏° ${itemName} ‡πÅ‡∏ï‡∏Å‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏≠‡∏∑‡πà‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏±‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á`);
        addToLog(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏µ‡∏ö‡∏ß‡∏Å ${itemName} ‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÅ‡∏ï‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏´‡∏°‡πà`, 'break');
        repairBtn.style.display = '';
        refineBtn.style.display = 'none';
    }
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á
    updateInventoryItem();
    
    // Update UI
    updateRefineLevelDisplay();
    updateStatBonus();
    updateRates();
    updateStats();
}

// Add new entry to refine log
function addToLog(message, type) {
    const logEntry = document.createElement('p');
    logEntry.textContent = message;
    logEntry.classList.add(`log-${type}`);
    refineLogElement.prepend(logEntry);
    
    // Limit log size
    if (refineLogElement.children.length > 10) {
        refineLogElement.removeChild(refineLogElement.lastChild);
    }
}

// Update statistics display
function updateStats() {
    totalAttemptsElement.textContent = totalAttempts;
    successCountElement.textContent = successCount;
    failCountElement.textContent = failCount;
    breakCountElement.textContent = breakCount;
}

// Update refine level display
function updateRefineLevelDisplay() {
    currentRefineLevelElement.textContent = currentRefineLevel;
}

// Reset refine level to 0 (after break)
function resetRefineLevel() {
    currentRefineLevel = 0;
    updateRefineLevelDisplay();
    updateStatBonus();
    updateRates();
}

// ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
function resetCurrentItemState() {
    isItemBroken = false;
    itemSymbol.style.opacity = "1";
    itemSymbol.style.filter = "none";
    const refineLevelElement = document.querySelector('.refine-level');
    if (refineLevelElement) refineLevelElement.classList.remove('broken');
    const brokenIcon = document.querySelector('.broken-icon');
    if (brokenIcon) brokenIcon.remove();
    repairBtn.style.display = 'none';
    refineBtn.style.display = '';
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å updateBrokenSelectStatus ‡πÉ‡∏ô‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡πÄ‡∏ä‡πà‡∏ô‡∏´‡∏•‡∏±‡∏á repairItem, resetCurrentItemState
    updateBrokenSelectStatus();
    updateRepairBtnState();
    repairMode = false;
    repairTargetId = null;
    repairMaterialId = null;
    updateBrokenSelectStatus();
    updateRepairBtnState();
    repairBtn.textContent = '‡∏ã‡πà‡∏≠‡∏°';
}

// Reset current item (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
function resetCurrentItem() {
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    currentRefineLevel = 0;
    resetCurrentItemState();
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á
    updateInventoryItem();
    
    // Update UI
    updateRefineLevelDisplay();
    updateStatBonus();
    updateRates();
    
    addToLog('‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô', 'reset');
}

// ‡∏•‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏±‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á
function deleteItemFromInventory(itemId) {
    if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏±‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
        if (itemId === currentItemId) {
            currentItemId = null;
            resetCurrentItemState();
            currentRefineLevel = 0;
            updateRefineLevelDisplay();
            updateStatBonus();
            updateRates();
        }
        
        // ‡∏•‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏±‡∏á
        inventory = inventory.filter(item => item.id !== itemId);
        saveInventory();
        renderInventory();
        
        addToLog('‡∏•‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏±‡∏á', 'reset');
    }
}

// Reset all statistics ‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏±‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
function resetAll() {
    if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏•‡∏±‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
        currentRefineLevel = 0;
        totalAttempts = 0;
        successCount = 0;
        failCount = 0;
        breakCount = 0;
        totalZeny = 0;
        totalStones = 0;
        isItemBroken = false;
        currentItemId = null;
        inventory = [];
        
        // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô localStorage
        localStorage.removeItem('romInventory');
        
        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏≠‡πÄ‡∏ó‡∏°
        resetCurrentItemState();
        
        // Clear refine log
        refineLogElement.innerHTML = '';
        
        // Update UI
        updateRefineLevelDisplay();
        updateStatBonus();
        updateRates();
        updateStats();
        renderInventory();
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        totalZenyElement.textContent = '0';
        totalStonesElement.textContent = '0';
        totalZenySpentElement.textContent = '0';
        totalStonesUsedElement.textContent = '0';
        
        addToLog('‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', 'reset');
    }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 0/1 ‡∏´‡∏£‡∏∑‡∏≠ 1/1
function updateBrokenSelectStatus() {
    const el = document.getElementById('brokenSelectStatus');
    if (!el) return;
    if (repairMode && repairMaterialId) {
        el.textContent = '1/1';
        el.style.color = '#4bdc7c';
    } else if (repairMode) {
        el.textContent = '0/1';
        el.style.color = '#ff3333';
    } else {
        el.textContent = '0/1';
        el.style.color = '#c9d1ff';
    }
}

function updateRepairBtnState() {
    if (repairMode && repairMaterialId) {
        repairBtn.disabled = false;
    } else if (repairMode) {
        repairBtn.disabled = true;
    } else {
        repairBtn.disabled = false;
    }
}

function repairItem() {
    if (!(repairMode && repairTargetId && repairMaterialId)) return;
    const target = inventory.find(i => i.id === repairTargetId);
    const material = inventory.find(i => i.id === repairMaterialId);
    if (!target || !material || !target.isBroken) return;
    target.isBroken = false;
    delete target.brokenAtLevel;
    // ‡∏•‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏±‡∏á
    inventory = inventory.filter(i => i.id !== repairMaterialId);
    saveInventory();
    addToLog('‡∏ã‡πà‡∏≠‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö', 'reset');
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÇ‡∏´‡∏°‡∏î‡∏ã‡πà‡∏≠‡∏°
    repairMode = false;
    repairTargetId = null;
    repairMaterialId = null;
    repairBtn.textContent = '‡∏ã‡πà‡∏≠‡∏°';
    // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ã‡πà‡∏≠‡∏°‡∏´‡∏≤‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏±‡∏á‡πÅ‡∏•‡πâ‡∏ß
    if (!target.isBroken) {
        repairBtn.style.display = 'none';
        refineBtn.style.display = '';
    }
    renderInventory();
    updateBrokenSelectStatus();
    updateRepairBtnState();
}
